{"version":3,"file":"static/js/371.92ed9e97.chunk.js","mappings":"gRAKe,SAASA,EAAT,GAAyC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACzC,GAAsCC,EAAAA,EAAAA,UAASF,GAA/C,eAAOG,EAAP,KAAoBC,EAApB,KAYA,OACE,kBAAMC,UAAU,aAAaJ,SAXV,SAAAK,GACnBA,EAAMC,iBACN,IAAMC,EAAkBL,EAAYM,cAAcC,OAElD,GAAwB,KAApBF,EACF,OAAOG,MAAM,8BAEfV,EAAS,CAAED,MAAOQ,GACnB,EAGC,WACE,kBACEH,UAAU,mBACVO,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,gBACZC,MAAOb,EACPc,SAAU,SAAAX,GAAK,OAAIF,EAAeE,EAAMY,cAAcF,MAAvC,EACfG,UAAW,MAEb,oBAAQP,KAAK,SAASP,UAAU,oBAAhC,WACE,SAAC,MAAD,CAAUA,UAAU,qBACpB,iBAAMA,UAAU,0BAAhB,yBAIP,CC/Bc,SAASe,IAAc,IAAD,EACnC,GAA0ClB,EAAAA,EAAAA,UAAS,IAAnD,eAAOmB,EAAP,KAAsBC,EAAtB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,GAAWC,EAAAA,EAAAA,MACX3B,EAAK,UAAGwB,EAAaI,IAAI,gBAApB,QAAgC,GAkB3C,OAhBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,uFACO7B,EADP,0EAK8B8B,EAAAA,EAAcA,EAAAA,EAAAA,aAAuB9B,GALnE,OAKU+B,EALV,OAMIT,EAAiBS,EAAYC,SANjC,gDAQIC,QAAQC,IAAR,MARJ,0DADc,uBAAC,WAAD,wBAadH,EACD,GAAE,CAAC/B,KAGF,iCACE,SAAC,EAAD,CAAWA,MAAOA,EAAOC,SAAUwB,KACnC,8BACGJ,EAAcc,OAAS,IACtB,iCACE,0CACA,wBACGd,EAAce,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACjB,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKF,GAAMG,MAAO,CAAEC,KAAMf,GAAlC,SACGY,KAFID,EADQ,aAahC,C,qHC/CDK,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAEaC,EAAO,CAClBC,SAAU,qBACVC,aAAc,eACdC,WAAY,SAAAT,GAAE,uBAAcA,EAAd,EACdU,WAAY,SAAAV,GAAE,uBAAcA,EAAd,aACdW,cAAe,SAAAX,GAAE,uBAAcA,EAAd,cAGNY,EAAS,mCAAG,WAAOC,EAAMlD,GAAb,gFACjBG,EAAcH,EAAK,iBAAaA,EAAb,WAA8B,GADhC,UAEA0C,EAAAA,EAAAA,GAAM,GAAD,OAAIQ,EAAJ,oBAZd,oCAYc,OAA8B/C,IAFnC,cAEjBgD,EAFiB,yBAGhBA,EAASC,MAHO,2CAAH,uD","sources":["components/SearchBar/Searchbar.jsx","pages/SearchPage/SearchPage.jsx","service/MoviesApi.jsx"],"sourcesContent":["import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { BsSearch } from 'react-icons/bs';\nimport './Searchbar.css';\n\nexport default function Searchbar({ query, onSubmit }) {\n  const [searchQuery, setSearchQuery] = useState(query);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const normalizedQuery = searchQuery.toLowerCase().trim();\n\n    if (normalizedQuery === '') {\n      return alert('Please enter movie to find');\n    }\n    onSubmit({ query: normalizedQuery });\n  };\n\n  return (\n    <form className=\"SearchForm\" onSubmit={handleSubmit}>\n      <input\n        className=\"SearchForm-input\"\n        type=\"text\"\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Search movies\"\n        value={searchQuery}\n        onChange={event => setSearchQuery(event.currentTarget.value)}\n        maxLength={30}\n      />\n      <button type=\"submit\" className=\"SearchForm-button\">\n        <BsSearch className=\"SearchForm-icon\" />\n        <span className=\"SearchForm-button-label\">Search</span>\n      </button>\n    </form>\n  );\n}\n\nSearchbar.propTypes = {\n  query: PropTypes.string.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useEffect, useState } from 'react';\nimport { Link, useSearchParams, useLocation } from 'react-router-dom';\nimport * as API from '../../service/MoviesApi';\nimport Searchbar from 'components/SearchBar/Searchbar';\n\nexport default function SearchPage() {\n  const [searchResults, setSearchResults] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const location = useLocation();\n  const query = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    async function fetchMovies() {\n      if (!query) {\n        return;\n      }\n      try {\n        const fetchMovies = await API.fetchData(API.PATH.searchByName, query);\n        setSearchResults(fetchMovies.results);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    fetchMovies();\n  }, [query]);\n\n  return (\n    <>\n      <Searchbar query={query} onSubmit={setSearchParams} />\n      <>\n        {searchResults.length > 0 && (\n          <>\n            <h1>Found movies</h1>\n            <ul>\n              {searchResults.map(({ id, title }) => (\n                <li key={id}>\n                  <Link to={`${id}`} state={{ from: location }}>\n                    {title}\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </>\n        )}\n      </>\n    </>\n  );\n}\n","import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'c56bd7e53d7ca9a4e158096c2a9f2678';\n\nexport const PATH = {\n  trending: 'trending/movie/day',\n  searchByName: 'search/movie',\n  searchByID: id => `/movie/${id}`,\n  searchCast: id => `/movie/${id}/credits`,\n  searchReviews: id => `/movie/${id}/reviews`,\n};\n\nexport const fetchData = async (path, query) => {\n  const searchQuery = query ? `&query=${query}&page=1` : '';\n  const response = await axios(`${path}?api_key=${API_KEY}${searchQuery}`);\n  return response.data;\n};\n"],"names":["Searchbar","query","onSubmit","useState","searchQuery","setSearchQuery","className","event","preventDefault","normalizedQuery","toLowerCase","trim","alert","type","autoComplete","autoFocus","placeholder","value","onChange","currentTarget","maxLength","SearchPage","searchResults","setSearchResults","useSearchParams","searchParams","setSearchParams","location","useLocation","get","useEffect","API","fetchMovies","results","console","log","length","map","id","title","to","state","from","axios","PATH","trending","searchByName","searchByID","searchCast","searchReviews","fetchData","path","response","data"],"sourceRoot":""}